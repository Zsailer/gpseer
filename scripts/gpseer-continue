# imports
import argparse
import numpy as np

from gpmap import GenotypePhenotypeMap
import epistasis.models

from gpseer import load

if __name__ == '__main__':

    # Handle command line argument.
    parser = argparse.ArgumentParser(
        description="Continue sampling a GPSeer model starting from the last "
                    "place you left off.")

    parser.add_argument('db_dir',
                        help="Directory containing previously sampled GPSeer.")
    parser.add_argument('output', default='results.csv',
                        type=str, help="Output filename.")
    parser.add_argument('--distributed', default=True, type=bool,
                        help="Distribute the computations in parallel "
                        "using Dask distributed.")
    parser.add_argument('--nsamples', default=100, type=int,
                        help="Number of steps taken by MCMC walkers. Total "
                        "number of steps will be (number of samples * number "
                        "of reference states)")

    # Arguments parsed.
    args = parser.parse_args()

    # Handle distribute
    if args.distributed:
        # Import Dask distributed
        from dask.distributed import Client

        # Start a distributed client
        client = Client()
    else:
        # Set client to None.
        client = None

    # Load seer from disk.
    seer = load(args.db_dir, client=client)

    # Sample pipeline, starting from previous state.
    seer.sample_pipeline(args.nsamples)

    # Write to file
    r = seer.results
    r.to_csv(output)
